{"version":3,"sources":["components/Navigation.tsx","components/CourseCard.tsx","components/CourseSearch.tsx","components/CalendarSection.tsx","components/InformationModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","userData","useState","Navbar","color","light","expand","NavbarBrand","href","Nav","className","NavItem","NavLink","userStyle","borderRadius","maxWidth","float","display","userBadgeStyle","marginTop","marginLeft","UserBadge","UncontrolledDropdown","inNavbar","DropdownToggle","Media","style","right","object","src","picture","alt","given_name","DropdownMenu","DropdownItem","TimingStyle","fontSize","ConflictStyle","width","CourseCard","courseName","subjectName","section","professorName","timings","conflict","handleRemoveButtonClick","handleAddButtonClick","crn","basket","CourseCardStyle","padding","margin","textAlign","borderColor","backgroundColor","getTimeString","date","hours","getHours","minutes","getMinutes","ampm","Card","CardTitle","Badge","pill","CardSubtitle","map","time","index","key","weekday","start","end","Button","onClick","CourseSearch","requestError","handleSubmit","setValues","values","handleInputChange","name","value","class_name","prof_name","Container","fluid","background","Form","onSubmit","e","event","console","log","data-testid","Row","Col","xl","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","target","placeholder","dep_name","type","CalendarSection","events","academicCalEvents","Date","calendarRef","React","createRef","allEvents","setAllEvents","getStartEndTime","result","startTime","endTime","defaultDate","length","sort","a","b","startHour","toString","startMin","slice","endHour","endMin","lateHours","earlyHours","maxMinTime","setMaxMinTime","useEffect","calendarObj","current","calendarAPI","getApi","sortedEvents","gotoDate","newEventState","newEvent","newTimings","rrule","duration","forEach","course","session","push","title","allDay","defaultView","plugins","timeGridPlugin","interactionPlugin","rrulePlugin","weekends","slotDuration","minTime","maxTime","slotEventOverlap","allDaySlot","slotLabelInterval","ref","InformationModal","modal","setModal","toggle","loading","execute","message","setMessage","buttonSettings","disabled","setDisabled","handleClose","Modal","isOpen","ModalHeader","ModalBody","Spinner","size","processed","split","shift","line","getContent","ModalFooter","text","defaultUserCalendarBookItem","id","primary","selected","App","inputCRN","setBasket","search","setSearch","setRequestError","setAcademicCalEvents","setUserData","selectedCalendar","setSelectedCalendar","setLoading","exportLoading","setExportLoading","setExecute","valuesDefault","fetch","then","res","json","response","AcademicCalEventsProcessed","error","parse","dateTime","allDayBool","getTime","summary","data","userCalBook","user_calendar_book","cal_a","cal_b","calendar_book","primaryCal","filter","cal","randomColor","randomInt","min","max","Math","floor","random","h","s","l","newState","newClass","sectionStyle","borderWidth","borderStyle","height","payload","calendar_id","method","body","JSON","stringify","headers","messageString","finalMessage","v","i","indexOf","join","catch","preventDefault","err","Error","courseCards","results","processedResponseTimings","timing","getDay","sname","professor__name","finally","UncontrolledAlert","label","overflowY","includes","group","caret","active","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb706140.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  Media,\n  NavbarText,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { SessionUserData }  from '../App'\n\ninterface NavigationProps {\n  userData: SessionUserData\n}\n\nexport const Navigation: React.FC<NavigationProps> = ({ userData }: NavigationProps) => {\n  const [loggedin, setLoggedin] = useState(false);\n  const toggle = () => setLoggedin(!loggedin);\n  return (\n    <>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Classic Course Manager</NavbarBrand>\n        <Nav className=\"mr-auto\">\n          <NavItem>\n            <NavLink> About</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> Help </NavLink>\n          </NavItem>\n        </Nav>\n          <UserBadge\n            userData={userData}\n          />\n      </Navbar>\n    </>\n  );\n};\n\ninterface UserBadgeProps {\n  userData: SessionUserData\n}\n\nconst userStyle: React.CSSProperties = {\n  borderRadius: \"50%\",\n  maxWidth: \"45px\",\n  float: \"left\",\n  display: \"inline-box\"\n}\n\nconst userBadgeStyle: React.CSSProperties = {\n  float: \"right\",\n  marginTop: \"10px\",\n  marginLeft: \"5px\"\n}\n\nconst UserBadge: React.FC<UserBadgeProps> = ({\n  userData\n}: UserBadgeProps) => {\n  return (\n    <>\n      <UncontrolledDropdown inNavbar>\n        <DropdownToggle color=\"light\">\n          <Media style={userStyle} right object src={userData.picture} alt=\"User Image\" />\n          <p style={userBadgeStyle}><b>{userData.given_name}</b></p>\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem href=\"/logout\"> Logout </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Badge,\n} from \"reactstrap\";\n\nexport interface CourseTimings {\n  weekday: number;\n  start: Date;\n  end: Date;\n  rrule?: string;\n  duration: string;\n}\n\nexport interface CourseCardProps {\n  courseName: string;\n  subjectName: string;\n  section: string;\n  professorName: string;\n  timings?: CourseTimings[];\n  conflict?: boolean;\n  crn: string;\n  handleRemoveButtonClick?: any;\n  handleAddButtonClick?: any;\n  basket: boolean;\n  color: string;\n}\n\nconst TimingStyle: React.CSSProperties = {\n  fontSize: \"0.85vw\",\n};\n\nconst ConflictStyle: React.CSSProperties = {\n  width: \"40%\",\n};\n\nconst getWeekDayName = (number: number) => {\n  const weekdays = [\"SUN\", \"MON\", \"TUES\", \"WED\", \"THURS\", \"FRI\"];\n  return weekdays[number];\n};\n\nexport const CourseCard: React.FC<CourseCardProps> = ({\n  courseName,\n  subjectName,\n  section,\n  professorName,\n  timings,\n  conflict,\n  handleRemoveButtonClick,\n  handleAddButtonClick,\n  crn,\n  basket,\n  color,\n}: CourseCardProps) => {\n  const CourseCardStyle: React.CSSProperties = {\n    padding: \"10px\",\n    margin: \"5px\",\n    textAlign: \"left\",\n    borderRadius: \"5px\",\n    borderColor: \"#000000\",\n    backgroundColor: color,\n  };\n\n  const getTimeString = (date: Date) => {\n    let hours = date.getHours();\n    let minutes: string | number = date.getMinutes();\n    let ampm = hours >= 12 ? \"pm\" : \"am\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    var strTime = hours + \":\" + minutes + \" \" + ampm;\n    return strTime;\n  };\n\n  return (\n    <>\n      <Card style={CourseCardStyle}>\n        <CardTitle>\n          <h4>{courseName}</h4>\n          {conflict ? (\n            <Badge style={ConflictStyle} pill color=\"danger\">\n              CONFLICT\n            </Badge>\n          ) : (\n            \"\"\n          )}\n        </CardTitle>\n        <CardSubtitle>\n          {subjectName} - {section}\n        </CardSubtitle>\n        <CardSubtitle>Professor {professorName}</CardSubtitle>\n        <br />\n        {timings?.map((time, index) => {\n          return (\n            <CardSubtitle key={index} style={TimingStyle}>\n              {getWeekDayName(time.weekday)}: {getTimeString(time.start)} to{\" \"}\n              {getTimeString(time.end)}\n            </CardSubtitle>\n          );\n        })}\n        {basket ? (\n          <Button\n            color=\"danger\"\n            onClick={() => {\n              handleRemoveButtonClick(crn);\n            }}\n          >\n            {\" \"}\n            Remove from Basket{\" \"}\n          </Button>\n        ) : (\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              handleAddButtonClick(crn);\n            }}\n          >\n            {\" \"}\n            Add to Basket{\" \"}\n          </Button>\n        )}\n      </Card>\n    </>\n  );\n};\n","import React, { CSSProperties, useState } from \"react\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n  Container,\n  FormGroup,\n  Row,\n  Col,\n  Button,\n  Form,\n} from \"reactstrap\";\n\ninterface CourseSearchComponents {\n  requestError: boolean;\n  handleSubmit: (e: React.FormEvent<Element>, values: FormValues) => void;\n  setValues: React.Dispatch<React.SetStateAction<FormValues>>;\n  values: FormValues;\n}\n\nexport interface FormValues {\n  dep_name: string\n  crn: string\n  prof_name: string\n  class_name: string\n}\n\nexport const CourseSearch: React.FC<CourseSearchComponents> = ({\n  requestError,\n  handleSubmit,\n  setValues,\n  values,\n}: CourseSearchComponents) => {\n\n  const handleInputChange = (name: 'crn' | 'dep_name' | 'prof_name' | 'class_name', value: string) =>{\n    switch(name){\n      case 'crn':\n        setValues({...values, crn: value})\n        break;\n      case 'class_name':\n        setValues({...values, class_name: value})\n        break;\n      case 'prof_name':\n        setValues({...values, prof_name: value})\n        break;\n      case 'class_name':\n        setValues({...values, class_name: value})\n        break;\n    }\n  }\n  \n  const handleFormSubmit = (event: React.FormEvent) => {\n    console.log(values)\n    handleSubmit(event, values)\n  }\n\n  return (\n    <>\n      <Container fluid style={{background: \"#cbf1f5\"}}>\n        <Form\n          onSubmit={(e) => handleFormSubmit(e)}\n          data-testid={\"class-search-form\"}\n          style={{padding: \"13px\", width: \"100%\"}}\n        >\n          <Row>\n            <Col xl={2}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>CRN</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"crn\"}\n                  value={values.crn}\n                  onChange={(e) => handleInputChange('crn', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"crn-input\"}\n                />\n              </InputGroup>\n            </Col>\n\n            <Col xl={2}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>Class Name</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"class-name\"}\n                  value={values.class_name}\n                  onChange={(e) => handleInputChange('class_name', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"class-input\"}\n                />\n              </InputGroup>\n            </Col>\n            <Col xl={3}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>Department</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"dep-name\"}\n                  value={values.dep_name}\n                  onChange={(e) => handleInputChange('dep_name', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"dep-input\"}\n                />\n              </InputGroup>\n            </Col>\n            <Col xl={3}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>Professor Name</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"prof-name\"}\n                  value={values.prof_name}\n                  onChange={(e) => handleInputChange('prof_name', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"prof-input\"}\n                />\n              </InputGroup>\n            </Col>\n            <Col xl={2}>\n              <Button type=\"submit\" color=\"primary\"> Search </Button> \n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport rrulePlugin from \"@fullcalendar/rrule\";\n\nimport \"@fullcalendar/core/main.css\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport { CourseCardProps } from \"./CourseCard\";\nimport { ExtendedEventSourceInput } from \"@fullcalendar/core/structs/event-source\";\nimport { EventSourceFunc } from \"@fullcalendar/core/event-sources/func-event-source\";\nimport { EventInput, Calendar } from \"@fullcalendar/core\";\nimport { durationsEqual } from \"@fullcalendar/core/datelib/duration\";\n\ninterface CalendarSectionProps {\n  events: CourseCardProps[];\n  academicCalEvents: EventProperties[];\n}\n\nexport interface EventProperties {\n  start: Date;\n  end: Date;\n  title: string;\n  allDay: boolean;\n  rrule?: string;\n  duration: string;\n  color: string;\n}\n\nexport const CalendarSection: React.FC<CalendarSectionProps> = ({\n  events,\n  academicCalEvents,\n}: CalendarSectionProps) => {\n  const [defaultDate, setDefaultDate] = useState(new Date());\n  const calendarRef: React.RefObject<FullCalendar> = React.createRef();\n  const [allEvents, setAllEvents] = useState(academicCalEvents);\n\n  const getStartEndTime = (events: EventProperties[]): resultProperties => {\n    let result = {\n      startTime: \"08:00\",\n      endTime: \"17:45\",\n      defaultDate: new Date(),\n    };\n\n    if (events.length < 1) {\n      return result;\n    }\n\n    events.sort((a, b) => {\n      return a.start > b.start ? 1 : -1;\n    });\n\n    result.defaultDate = events[0].start;\n\n    let startHour = (events[0].start.getHours() - 1).toString();\n    let startMin = events[0].start.getMinutes().toString();\n    startHour = (\"00000\" + startHour).slice(-2);\n    startMin = (\"00000\" + startMin).slice(-2);\n\n    let endHour = (events[events.length - 1].end.getHours() + 1).toString();\n    let endMin = events[events.length - 1].end.getMinutes().toString();\n    endHour = (\"00000\" + endHour).slice(-2);\n    endMin = (\"00000\" + endMin).slice(-2);\n\n    const lateHours = events[events.length - 1].end.getHours() > 17;\n    const earlyHours = events[0].start.getHours() < 8;\n\n    if (\n      !(\n        events[events.length - 1].end.getHours() - events[0].start.getHours() >=\n          7 ||\n        lateHours ||\n        earlyHours\n      )\n    ) {\n      result.startTime = `${startHour}:${startMin}`;\n      result.endTime = `${endHour}:${endMin}`;\n    }\n\n    return result;\n  };\n\n  const [maxMinTime, setMaxMinTime] = useState(getStartEndTime(allEvents));\n\n  useEffect(() => {\n    //TODO: accomodate for student events as well\n    const allEvents = [...academicCalEvents];\n    const calendarObj = calendarRef.current;\n    if (calendarObj) {\n      const calendarAPI = calendarObj.getApi();\n\n      const sortedEvents = allEvents.sort((a, b) => {\n        return a.start > b.start ? 1 : -1;\n      });\n\n      if (allEvents.length > 1) {\n        calendarAPI.gotoDate(sortedEvents[0].start);\n      }\n    }\n\n    setAllEvents(academicCalEvents);\n  }, [academicCalEvents]);\n\n  interface resultProperties {\n    startTime: string;\n    endTime: string;\n    defaultDate: Date;\n  }\n\n  useEffect(() => {\n    let newEventState: EventProperties[] = [];\n\n    const timeFix = events.map((event) => {\n      let newEvent = event;\n      let newTimings = event.timings?.map((e) => {\n        return {\n          start: new Date(e.start),\n          end: new Date(e.end),\n          weekday: e.weekday,\n          rrule: e.rrule,\n          duration: e.duration,\n        };\n      });\n\n      newEvent.timings = newTimings;\n      return newEvent;\n    });\n\n    timeFix.forEach((course) => {\n      course.timings?.forEach((session) => {\n        newEventState.push({\n          start: session.start,\n          end: session.end,\n          title: course.courseName,\n          allDay: false,\n          rrule: session.rrule,\n          duration: session.duration,\n          color: course.color,\n        });\n      });\n    });\n\n    console.log(\"this is new event state\", newEventState);\n    setAllEvents([...academicCalEvents, ...newEventState]);\n    setMaxMinTime(getStartEndTime([...newEventState]));\n  }, [events]);\n\n  return (\n    <>\n      {maxMinTime.startTime}\n      {maxMinTime.endTime}\n      <FullCalendar\n        events={allEvents}\n        defaultView=\"timeGridWeek\"\n        plugins={[timeGridPlugin, interactionPlugin, rrulePlugin]}\n        weekends={false}\n        slotDuration={{ minutes: 30 }}\n        minTime={\"07:30\"}\n        maxTime={\"22:45\"}\n        slotEventOverlap={true}\n        allDaySlot={true}\n        slotLabelInterval={{ minutes: 90 }}\n        ref={calendarRef}\n      ></FullCalendar>\n    </>\n  );\n};\n","import React, { Dispatch, SetStateAction, useState } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Spinner,\n} from \"reactstrap\";\n\ninterface InformationModalProps {\n  modal: boolean;\n  toggle: () => void;\n  setModal: Dispatch<SetStateAction<boolean>>;\n  setMessage: Dispatch<SetStateAction<string>>;\n  loading: boolean;\n  execute: () => void;\n  message: string;\n  title: string;\n  buttonSettings: ButtonSettings;\n}\n\ninterface ButtonSettings {\n  type: string;\n  text: string;\n}\n\nexport const InformationModal: React.FC<InformationModalProps> = ({\n  modal,\n  toggle,\n  setModal,\n  loading,\n  execute,\n  message,\n  title,\n  setMessage,\n  buttonSettings,\n}: InformationModalProps) => {\n  const close = () => setModal(false);\n  const [disabled, setDisabled] = useState(false);\n  const handleAction = () => {\n    execute();\n    setDisabled(true);\n  };\n\n  const handleClose = () => {\n    setDisabled(false);\n    setMessage(\"\");\n    close();\n  };\n\n  const getContent = () => {\n    if (buttonSettings.type == \"success\") {\n      let processed = message.split(\"!\");\n      return (\n        <>\n          {processed.shift()}\n          <ul>\n            {processed.map((line) => {\n              return <li>{line}</li>;\n            })}\n          </ul>\n        </>\n      );\n    } else {\n      return message;\n    }\n  };\n\n  return (\n    <>\n      <Modal isOpen={modal} toggle={handleClose}>\n        <ModalHeader toggle={handleClose}>{title}</ModalHeader>\n        <ModalBody>\n          {loading ? <Spinner size={\"lg\"} /> : getContent()}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            disabled={disabled}\n            color={buttonSettings.type}\n            onClick={handleAction}\n          >\n            {buttonSettings.text}\n          </Button>{\" \"}\n          <Button color=\"secondary\" onClick={handleClose}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n","import React, {\n  useState,\n  FormEventHandler,\n  CSSProperties,\n  useEffect,\n} from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navigation } from \"./components/Navigation\";\nimport {\n  CourseCard,\n  CourseCardProps,\n  CourseTimings,\n} from \"./components/CourseCard\";\n\nimport { CourseSearch, FormValues } from \"./components/CourseSearch\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Navbar,\n  NavbarBrand,\n  NavbarText,\n  NavbarToggler,\n  Nav,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n  Carousel,\n  UncontrolledAlert,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Spinner,\n  Badge,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from \"reactstrap\";\nimport { CalendarSection, EventProperties } from \"./components/CalendarSection\";\nimport { URLSearchParams } from \"url\";\nimport { timeAsMs } from \"@fullcalendar/core/datelib/marker\";\nimport { formatIsoTimeString } from \"@fullcalendar/core\";\nimport { InformationModal } from \"./components/InformationModal\";\n\nconst COLORS = [\"#264653\", \"#2a9d8f\", \"#e9c46a\", \"#f4a261\", \"#e76f51\"];\ninterface APIResponse {\n  error: boolean;\n  results: APIResponseCourse[];\n  message?: string;\n}\n\ninterface APIResponseCourse {\n  crn: number;\n  level: string;\n  multiple_sections: boolean;\n  name: string;\n  professor__name: string;\n  remaining: number;\n  section: string;\n  show_xlist: boolean;\n  sname: string;\n  waitlistact: number;\n  timings: APIResponseTimingsData[];\n  message?: string;\n}\n\ninterface APIResponseTimingsData {\n  allDay: boolean;\n  end: string;\n  start: string;\n  title: string;\n  crn: number;\n  id: number;\n  rrule: string;\n  duration: string;\n}\n\ninterface AcademicCalEventProperties {\n  start: AcademicCalDateProperties;\n  end: AcademicCalDateProperties;\n  summary: string;\n  description: string;\n}\n\ninterface AcademicCalDateProperties {\n  date?: string;\n  dateTime?: string;\n  timeZone?: string;\n}\n\ninterface AcademicCalEventsResponseProperties {\n  last_fetched: string;\n  events: AcademicCalEventProperties[];\n  error: boolean;\n  message?: string;\n}\n\nexport interface SessionUserData {\n  email: string;\n  email_verified: boolean;\n  family_name: string;\n  given_name: string;\n  locale: string;\n  name: string;\n  nickname: string;\n  picture: string;\n  sub: string;\n  updated_at: string;\n  calendar_book?: UserCalendarBookItem[];\n}\n\nexport interface UserCalendarBookItem {\n  id: string;\n  title: string;\n  color: string;\n  primary: boolean;\n  selected: boolean;\n}\n\nconst defaultUserCalendarBookItem = {\n  id: \"\",\n  title: \"Select a calendar\",\n  color: \"#f0f0f0\",\n  primary: false,\n  selected: false,\n};\n\nfunction App() {\n  const [inputCRN, setInputCRN] = useState(\"\");\n  const [basket, setBasket] = useState([] as CourseCardProps[]);\n  const [search, setSearch] = useState([] as CourseCardProps[]);\n  const [requestError, setRequestError] = useState(false);\n  const [academicCalEvents, setAcademicCalEvents] = useState(\n    [] as EventProperties[]\n  );\n  const [userData, setUserData] = useState({} as SessionUserData);\n  const [selectedCalendar, setSelectedCalendar] = useState(\n    defaultUserCalendarBookItem as UserCalendarBookItem\n  );\n  const [loading, setLoading] = useState(false);\n  const [exportLoading, setExportLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const [modal, setModal] = useState(false);\n  const [execute, setExecute] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  const valuesDefault = {\n    dep_name: \"\",\n    crn: \"\",\n    prof_name: \"\",\n    class_name: \"\",\n  } as FormValues;\n\n  const [values, setValues] = useState(valuesDefault);\n\n  //Just like component did mount <3\n  useEffect(() => {\n    fetch(\"/api/getacademiccalinfo\")\n      .then((res) => res.json())\n      .then((response: AcademicCalEventsResponseProperties) => {\n        let AcademicCalEventsProcessed = [] as EventProperties[];\n        if (response.error) {\n          console.log(\"Error when fetching response: \" + response.message);\n          return;\n        }\n\n        AcademicCalEventsProcessed = response.events.map((event) => {\n          let startTime = new Date();\n          let endTime = new Date();\n\n          if (event.start.date && event.end.date) {\n            startTime = new Date(Date.parse(event.start.date));\n            startTime = new Date(Date.parse(event.end.date));\n          } else if (event.start.dateTime && event.end.dateTime) {\n            startTime = new Date(Date.parse(event.start.dateTime));\n            endTime = new Date(Date.parse(event.end.dateTime));\n          }\n\n          const allDayBool =\n            startTime.getTime() - endTime.getTime() > 1000 * 60 * 60 * 23;\n          return {\n            start: startTime,\n            end: endTime,\n            title: event.summary,\n            allDay: allDayBool,\n          } as EventProperties;\n        });\n        setAcademicCalEvents(AcademicCalEventsProcessed);\n\n        fetch(\"/api/user_data\")\n          .then((res) => res.json())\n          .then((data) => {\n            let userCalBook = data.user_calendar_book;\n            userCalBook.sort(\n              (cal_a: UserCalendarBookItem, cal_b: UserCalendarBookItem) => {\n                return cal_a.selected === cal_b.selected\n                  ? 0\n                  : cal_a.selected\n                  ? -1\n                  : 1;\n              }\n            );\n            const userData = {\n              ...data.session,\n              calendar_book: userCalBook,\n            };\n            setUserData(userData as SessionUserData);\n          });\n      });\n  }, []);\n\n  useEffect(() => {\n    if (userData.calendar_book) {\n      const primaryCal = userData.calendar_book.filter((cal) => {\n        return cal.primary;\n      })[0];\n      setSelectedCalendar(primaryCal);\n    }\n  }, [userData]);\n\n  const randomColor = (() => {\n    \"use strict\";\n\n    const randomInt = (min: number, max: number) => {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    return () => {\n      var h = randomInt(0, 360);\n      var s = randomInt(42, 98);\n      var l = randomInt(40, 90);\n      return `hsl(${h},${s}%,${l}%)`;\n    };\n  })();\n\n  const handleSubmit = (e: React.FormEvent, values: FormValues) => {\n    e.preventDefault();\n    setRequestError(false);\n    setLoading(true);\n    setSearch([]);\n    if (\n      basket.filter((course) => {\n        return course.crn == inputCRN;\n      }).length < 1\n    ) {\n      fetch(\"/api/getinfo\", {\n        method: \"POST\",\n        body: JSON.stringify(values),\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n        .then((res: Response) => {\n          try {\n            let result: Promise<APIResponse> = res.json();\n            return result;\n          } catch (err) {\n            console.log(err);\n            throw err;\n          }\n        })\n        .then((result) => {\n          if (result.error) {\n            throw new Error(result.message);\n          }\n          console.log(result);\n          return result;\n        })\n        .then((response) => {\n          const courseCards = response.results.map(\n            (result: APIResponseCourse) => {\n              let processedResponse: CourseCardProps | null = null;\n              let processedResponseTimings: CourseTimings[] = result.timings.map(\n                (timing) => {\n                  return {\n                    weekday: new Date(timing.start).getDay(),\n                    start: new Date(timing.start),\n                    end: new Date(timing.end),\n                    rrule: timing.rrule,\n                    duration: timing.duration,\n                  };\n                }\n              );\n\n              return {\n                courseName: result.name,\n                subjectName: result.sname,\n                section: result.section,\n                professorName: result.professor__name,\n                crn: result.crn.toString(),\n                timings: processedResponseTimings,\n                color: randomColor(),\n              } as CourseCardProps;\n            }\n          );\n\n          console.log(JSON.stringify(courseCards));\n\n          setSearch(courseCards);\n        })\n        .catch((err: Error) => {\n          setRequestError(true);\n          console.log(\"OOOO\", err);\n        })\n        .finally(() => {\n          setValues(valuesDefault);\n          setLoading(false);\n        });\n    } else {\n      setRequestError(true);\n    }\n  };\n\n  const handleRemoveButtonClick = (crn: string) => {\n    let newState = basket;\n    newState = newState.filter((course) => {\n      if (course.crn === crn) {\n        setSearch([...search, course]);\n      }\n      return course.crn !== crn;\n    });\n    console.log(newState);\n    setBasket(newState);\n  };\n\n  const handleAddButtonClick = (crn: string) => {\n    //remove from search bar\n    setSearch(\n      search.filter((course) => {\n        return course.crn !== crn;\n      })\n    );\n\n    //add to basket\n    const newClass = search.filter((course) => {\n      return course.crn === crn;\n    });\n    setBasket([...basket, ...newClass]);\n  };\n\n  const sectionStyle: CSSProperties = {\n    borderColor: \"grey\", //\"#a6e3e9\",\n    borderWidth: \"2px\",\n    borderStyle: \"solid\",\n    height: \"80vh\",\n    //backgroundColor: \"#e3fdfd\"\n  };\n\n  const getCalSelectStyle = (cal: UserCalendarBookItem) => {\n    return {\n      backgroundColor: cal.color,\n    } as CSSProperties;\n  };\n\n  const handleCalendarExport = () => {\n    setExportLoading(true);\n    const payload = {\n      basket: basket,\n      calendar_id: selectedCalendar.id,\n    };\n    fetch(\"/api/user_events\", {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        let messageString: string[] = res.body.map((event: any) => {\n          return event.summary;\n        });\n\n        messageString = messageString.filter(\n          (v, i) => messageString.indexOf(v) === i\n        );\n        const finalMessage =\n          \"The following classes have been added:!\" + messageString.join(\"!\");\n        setMessage(finalMessage);\n        setExportLoading(false);\n        setBasket([]);\n      });\n  };\n\n  const handleClearEvents = () => {\n    setExportLoading(true);\n    fetch(\"/api/clear_events\", {\n      method: \"POST\",\n      body: JSON.stringify({ calendar_id: selectedCalendar.id }),\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        setExportLoading(false);\n        setMessage(\"All Classic Events were deleted successfully!\");\n      })\n      .catch((e) => {\n        console.log(e);\n        setExportLoading(false);\n        setMessage(\"An error occured\");\n      });\n  };\n\n  const handleExportButtonClick = () => {\n    setExecute(true);\n    setMessage(\"You are about to export your basket. Are you sure?\");\n    toggle();\n  };\n\n  const handleClearCalendarClick = () => {\n    setExecute(false);\n    setMessage(\n      \"Would you like to clear all Classic events for: \" +\n        selectedCalendar.title +\n        \"?\"\n    );\n    toggle();\n  };\n\n  const deleteEventButton = {\n    type: \"danger\",\n    text: \"Delete Events\",\n  };\n\n  const exportButton = {\n    type: \"success\",\n    text: \"Export classes\",\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation userData={userData} />\n      {execute ? (\n        <InformationModal\n          modal={modal}\n          toggle={toggle}\n          setModal={setModal}\n          execute={handleCalendarExport}\n          loading={exportLoading}\n          message={message}\n          setMessage={setMessage}\n          title={\"Calendar Export\"}\n          buttonSettings={exportButton}\n        />\n      ) : (\n        <InformationModal\n          modal={modal}\n          toggle={toggle}\n          setModal={setModal}\n          execute={handleClearEvents}\n          loading={exportLoading}\n          message={message}\n          setMessage={setMessage}\n          title={\"Clear Classic Events\"}\n          buttonSettings={deleteEventButton}\n        />\n      )}\n\n      <Container fluid>\n        <Row>\n          <Col xl={12}>\n            <CourseSearch\n              handleSubmit={handleSubmit}\n              setValues={setValues}\n              values={values}\n              requestError={requestError}\n            />\n            {requestError ? (\n              <UncontrolledAlert label={\"errmsg\"} color={\"danger\"}>\n                There was an error. Please try again.\n              </UncontrolledAlert>\n            ) : (\n              \"\"\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col xl={2} style={{ ...sectionStyle, overflowY: \"auto\" }}>\n            {loading ? (\n              <Spinner\n                style={{ width: \"8rem\", height: \"8rem\", marginTop: \"100%\" }}\n              />\n            ) : (\n              \"\"\n            )}\n            {search.map((course, index) => {\n              //prevents showing ones we already have added\n              let basketCRNs = basket.map((course) => course.crn);\n              if (basketCRNs.includes(course.crn)) {\n                return;\n              }\n\n              return (\n                <CourseCard\n                  key={index}\n                  handleAddButtonClick={handleAddButtonClick}\n                  {...course}\n                />\n              );\n            })}\n          </Col>\n          <Col xl={2} style={sectionStyle}>\n            {basket.map((course, index) => {\n              return (\n                <CourseCard\n                  key={index}\n                  handleRemoveButtonClick={handleRemoveButtonClick}\n                  basket={true}\n                  {...course}\n                />\n              );\n            })}\n          </Col>\n          <Col xl={6} style={sectionStyle}>\n            <CalendarSection\n              events={basket}\n              academicCalEvents={academicCalEvents}\n            />\n          </Col>\n          <Col xl={2} style={sectionStyle}>\n            <UncontrolledDropdown group size=\"md\">\n              <DropdownToggle style={getCalSelectStyle(selectedCalendar)} caret>\n                {\" \"}\n                {selectedCalendar.title}\n              </DropdownToggle>\n              <DropdownMenu>\n                {userData.calendar_book?.map((cal, index) => {\n                  const selected = cal.id == selectedCalendar.id;\n                  return (\n                    <DropdownItem\n                      active={selected}\n                      key={index}\n                      onClick={() => setSelectedCalendar(cal)}\n                    >\n                      {cal.title}\n                    </DropdownItem>\n                  );\n                })}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            <Button\n              disabled={!(basket.length > 0)}\n              onClick={handleExportButtonClick}\n              color=\"primary\"\n            >\n              Export to Calendar\n            </Button>\n            <Button color=\"danger\" onClick={handleClearCalendarClick}>\n              Clear Calendar\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}