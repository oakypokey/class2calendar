{"version":3,"sources":["components/Navigation.tsx","components/CourseCard.tsx","components/CourseSearch.tsx","components/CalendarSection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","userData","useState","Navbar","color","light","expand","NavbarBrand","href","Nav","className","NavItem","NavLink","userStyle","borderRadius","maxWidth","float","display","userBadgeStyle","marginTop","marginLeft","UserBadge","UncontrolledDropdown","inNavbar","DropdownToggle","Media","style","right","object","src","picture","alt","given_name","DropdownMenu","DropdownItem","CourseCardStyle","padding","margin","textAlign","TimingStyle","fontSize","ConflictStyle","width","CourseCard","courseName","subjectName","section","professorName","timings","conflict","handleRemoveButtonClick","handleAddButtonClick","crn","basket","getTimeString","date","hours","getHours","minutes","getMinutes","ampm","Card","CardTitle","Badge","pill","CardSubtitle","map","time","index","key","weekday","start","end","Button","onClick","CourseSearch","requestError","handleSubmit","setValues","values","handleInputChange","name","value","class_name","prof_name","Container","fluid","Form","onSubmit","e","event","console","log","data-testid","Row","Col","xl","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","target","placeholder","dep_name","type","CalendarSection","events","academicCalEvents","Date","calendarRef","React","createRef","useEffect","allEvents","calendarObj","current","calendarAPI","getApi","sortedEvents","sort","a","b","length","gotoDate","getStartEndTime","result","startTime","endTime","defaultDate","startHour","toString","startMin","slice","endHour","endMin","lateHours","earlyHours","defaultView","plugins","timeGridPlugin","interactionPlugin","weekends","slotDuration","minTime","maxTime","slotEventOverlap","allDaySlot","slotLabelInterval","ref","defaultUserCalendarBookItem","id","title","primary","selected","App","inputCRN","setBasket","search","setSearch","setRequestError","setAcademicCalEvents","setUserData","selectedCalendar","setSelectedCalendar","fetch","then","res","json","response","AcademicCalEventsProcessed","error","message","parse","dateTime","allDayBool","getTime","summary","allDay","data","userCalBook","user_calendar_book","cal_a","cal_b","session","calendar_book","primaryCal","filter","cal","newState","course","newClass","sectionStyle","borderColor","borderWidth","borderStyle","preventDefault","method","body","JSON","stringify","headers","err","Error","courseCards","results","processedResponseTimings","timing","getDay","sname","professor__name","catch","finally","UncontrolledAlert","label","includes","group","size","backgroundColor","caret","active","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.539863ea.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  Media,\n  NavbarText,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { SessionUserData }  from '../App'\n\ninterface NavigationProps {\n  userData: SessionUserData\n}\n\nexport const Navigation: React.FC<NavigationProps> = ({ userData }: NavigationProps) => {\n  const [loggedin, setLoggedin] = useState(false);\n  const toggle = () => setLoggedin(!loggedin);\n  return (\n    <>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Classic Course Manager</NavbarBrand>\n        <Nav className=\"mr-auto\">\n          <NavItem>\n            <NavLink> About</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> Help </NavLink>\n          </NavItem>\n        </Nav>\n          <UserBadge\n            userData={userData}\n          />\n      </Navbar>\n    </>\n  );\n};\n\ninterface UserBadgeProps {\n  userData: SessionUserData\n}\n\nconst userStyle: React.CSSProperties = {\n  borderRadius: \"50%\",\n  maxWidth: \"45px\",\n  float: \"left\",\n  display: \"inline-box\"\n}\n\nconst userBadgeStyle: React.CSSProperties = {\n  float: \"right\",\n  marginTop: \"10px\",\n  marginLeft: \"5px\"\n}\n\nconst UserBadge: React.FC<UserBadgeProps> = ({\n  userData\n}: UserBadgeProps) => {\n  return (\n    <>\n      <UncontrolledDropdown inNavbar>\n        <DropdownToggle color=\"light\">\n          <Media style={userStyle} right object src={userData.picture} alt=\"User Image\" />\n          <p style={userBadgeStyle}><b>{userData.given_name}</b></p>\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem href=\"/logout\"> Logout </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Badge,\n} from \"reactstrap\";\n\nexport interface CourseTimings {\n  weekday: number\n  start: Date\n  end: Date\n}\n\nexport interface CourseCardProps {\n  courseName: string;\n  subjectName: string;\n  section: string;\n  professorName: string;\n  timings?: CourseTimings[];\n  conflict?: boolean;\n  crn: string;\n  handleRemoveButtonClick?: any\n  handleAddButtonClick?: any\n  basket: boolean\n}\n\nconst CourseCardStyle: React.CSSProperties = {\n  padding: \"10px\",\n  margin: \"5px\",\n  textAlign: \"left\"\n};\n\nconst TimingStyle: React.CSSProperties = {\n  fontSize: \"0.85vw\"\n};\n\nconst ConflictStyle: React.CSSProperties = {\n  width: \"40%\"\n};\n\nexport const CourseCard: React.FC<CourseCardProps> = ({\n  courseName,\n  subjectName,\n  section,\n  professorName,\n  timings,\n  conflict,\n  handleRemoveButtonClick,\n  handleAddButtonClick,\n  crn,\n  basket\n}: CourseCardProps) => {\n\n  const getTimeString = (date: Date) => {\n    let hours = date.getHours();\n    let minutes: string | number = date.getMinutes();\n    let ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  }\n\n  return (\n    <>\n      <Card style={CourseCardStyle}>\n        <CardTitle>\n          <h4>{courseName}</h4>\n          {conflict ? (\n            <Badge style={ConflictStyle} pill color=\"danger\">\n              CONFLICT\n            </Badge>\n          ) : (\n            \"\"\n          )}\n        </CardTitle>\n        <CardSubtitle>\n            {subjectName} - {section}\n          </CardSubtitle>\n          <CardSubtitle>Professor {professorName}</CardSubtitle>\n          <br/>\n          {timings?.map((time, index) => {\n            return (\n              <CardSubtitle key={index} style={TimingStyle}>\n                {time.weekday}: {getTimeString(time.start)} to {getTimeString(time.end)}\n              </CardSubtitle>\n            );\n          })}\n          {\n            basket ? <Button color=\"danger\" onClick={() => {handleRemoveButtonClick(crn)}}> Remove from Basket </Button> : <Button color=\"primary\" onClick={() => {handleAddButtonClick(crn)}}> Add to Basket </Button>\n          }\n        \n      </Card>\n    </>\n  );\n};\n\n","import React, { CSSProperties, useState } from \"react\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n  Container,\n  FormGroup,\n  Row,\n  Col,\n  Button,\n  Form,\n} from \"reactstrap\";\n\ninterface CourseSearchComponents {\n  requestError: boolean;\n  handleSubmit: (e: React.FormEvent<Element>, values: FormValues) => void;\n  setValues: React.Dispatch<React.SetStateAction<FormValues>>;\n  values: FormValues;\n}\n\nexport interface FormValues {\n  dep_name: string\n  crn: string\n  prof_name: string\n  class_name: string\n}\n\nexport const CourseSearch: React.FC<CourseSearchComponents> = ({\n  requestError,\n  handleSubmit,\n  setValues,\n  values,\n}: CourseSearchComponents) => {\n\n  const handleInputChange = (name: 'crn' | 'dep_name' | 'prof_name' | 'class_name', value: string) =>{\n    switch(name){\n      case 'crn':\n        setValues({...values, crn: value})\n        break;\n      case 'class_name':\n        setValues({...values, class_name: value})\n        break;\n      case 'prof_name':\n        setValues({...values, prof_name: value})\n        break;\n      case 'class_name':\n        setValues({...values, class_name: value})\n        break;\n    }\n  }\n  \n  const handleFormSubmit = (event: React.FormEvent) => {\n    console.log(values)\n    handleSubmit(event, values)\n  }\n\n  return (\n    <>\n      <Container fluid>\n        <Form\n          onSubmit={(e) => handleFormSubmit(e)}\n          data-testid={\"class-search-form\"}\n        >\n          <Row>\n            <Col xl={2}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>CRN</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"crn\"}\n                  value={values.crn}\n                  onChange={(e) => handleInputChange('crn', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"crn-input\"}\n                />\n              </InputGroup>\n            </Col>\n\n            <Col xl={2}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>Class Name</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"class-name\"}\n                  value={values.class_name}\n                  onChange={(e) => handleInputChange('class_name', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"class-input\"}\n                />\n              </InputGroup>\n            </Col>\n            <Col xl={3}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>Department</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"dep-name\"}\n                  value={values.dep_name}\n                  onChange={(e) => handleInputChange('dep_name', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"dep-input\"}\n                />\n              </InputGroup>\n            </Col>\n            <Col xl={3}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>Professor Name</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"prof-name\"}\n                  value={values.prof_name}\n                  onChange={(e) => handleInputChange('prof_name', e.target.value)}\n                  placeholder=\"12345\"\n                  data-testid={\"prof-input\"}\n                />\n              </InputGroup>\n            </Col>\n            <Col xl={2}>\n              <Button type=\"submit\" color=\"primary\"> Search </Button> \n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nimport \"@fullcalendar/core/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport { CourseCardProps } from \"./CourseCard\";\nimport { ExtendedEventSourceInput } from \"@fullcalendar/core/structs/event-source\";\nimport { EventSourceFunc } from \"@fullcalendar/core/event-sources/func-event-source\";\nimport { EventInput, Calendar } from \"@fullcalendar/core\";\nimport { durationsEqual } from \"@fullcalendar/core/datelib/duration\";\n\ninterface CalendarSectionProps {\n  events: CourseCardProps[];\n  academicCalEvents: EventProperties[];\n}\n\nexport interface EventProperties {\n  start: Date;\n  end: Date;\n  title: string;\n  allDay: boolean;\n}\n\nexport const CalendarSection: React.FC<CalendarSectionProps> = ({\n  events,\n  academicCalEvents,\n}: CalendarSectionProps) => {\n    const [defaultDate, setDefaultDate] = useState(new Date())\n    const calendarRef: React.RefObject<FullCalendar> = React.createRef()\n\n  useEffect(() => {\n      //TODO: accomodate for course events as well\n      const allEvents = [...academicCalEvents]\n      const calendarObj = calendarRef.current\n      if(calendarObj){\n        const calendarAPI = calendarObj.getApi()\n\n        const sortedEvents = allEvents.sort((a, b) => {\n            return a.start > b.start ? 1 : -1;\n          });\n        \n        if(allEvents.length > 1){\n            calendarAPI.gotoDate(sortedEvents[0].start)\n        }\n        \n      }\n  }, [academicCalEvents])\n\n  const allEvents = academicCalEvents;\n\n  interface resultProperties {\n    startTime: string;\n    endTime: string;\n    defaultDate: Date;\n  }\n\n  const getStartEndTime = (events: EventProperties[]): resultProperties => {\n    let result = {\n      startTime: \"08:00\",\n      endTime: \"17:45\",\n      defaultDate: new Date(),\n    };\n\n    if(events.length < 1){\n        return result\n    }\n\n    events.sort((a, b) => {\n      return a.start > b.start ? 1 : -1;\n    });\n\n    result.defaultDate = events[0].start\n\n    let startHour = (events[0].start.getHours() - 1).toString();\n    let startMin = events[0].start.getMinutes().toString();\n    startHour = (\"00000\" + startHour).slice(-2);\n    startMin = (\"00000\" + startMin).slice(-2);\n\n    let endHour = (events[events.length - 1].end.getHours() + 1).toString();\n    let endMin = events[events.length - 1].end.getMinutes().toString();\n    endHour = (\"00000\" + endHour).slice(-2);\n    endMin = (\"00000\" + endMin).slice(-2);\n\n    const lateHours = events[events.length - 1].end.getHours() > 17;\n    const earlyHours = events[0].start.getHours() < 8;\n\n    if (\n      !(\n        events[0].start.getHours() - events[events.length - 1].end.getHours() >=\n          4 ||\n        lateHours ||\n        earlyHours\n      )\n    ) {\n      result.startTime = `${startHour}:${startMin}`;\n      result.endTime = `${endHour}:${endMin}`;\n    }\n\n    return result;\n  };\n\n  return (\n    <>\n      <FullCalendar\n        events={allEvents}\n        defaultView=\"timeGridWeek\"\n        plugins={[timeGridPlugin, interactionPlugin]}\n        weekends={false}\n        slotDuration={{ minutes: 30 }}\n        minTime={getStartEndTime(allEvents).startTime}\n        maxTime={getStartEndTime(allEvents).endTime}\n        slotEventOverlap={true}\n        allDaySlot={true}\n        slotLabelInterval={{ minutes: 90 }}\n        ref={calendarRef}\n      ></FullCalendar>\n    </>\n  );\n};\n","import React, {\n  useState,\n  FormEventHandler,\n  CSSProperties,\n  useEffect,\n} from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navigation } from \"./components/Navigation\";\nimport {\n  CourseCard,\n  CourseCardProps,\n  CourseTimings,\n} from \"./components/CourseCard\";\n\nimport { CourseSearch, FormValues } from \"./components/CourseSearch\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Navbar,\n  NavbarBrand,\n  NavbarText,\n  NavbarToggler,\n  Nav,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n  Carousel,\n  UncontrolledAlert,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n} from \"reactstrap\";\nimport { CalendarSection, EventProperties } from \"./components/CalendarSection\";\nimport { URLSearchParams } from \"url\";\n\ninterface APIResponse {\n  error: boolean;\n  results: APIResponseCourse[];\n  message?: string;\n}\n\ninterface APIResponseCourse {\n  crn: number;\n  level: string;\n  multiple_sections: boolean;\n  name: string;\n  professor__name: string;\n  remaining: number;\n  section: string;\n  show_xlist: boolean;\n  sname: string;\n  waitlistact: number;\n  timings: APIResponseTimingsData[];\n  message?: string;\n}\n\ninterface APIResponseTimingsData {\n  allDay: boolean;\n  end: string;\n  start: string;\n  title: string;\n  crn: number;\n  id: number;\n}\n\ninterface AcademicCalEventProperties {\n  start: AcademicCalDateProperties;\n  end: AcademicCalDateProperties;\n  summary: string;\n  description: string;\n}\n\ninterface AcademicCalDateProperties {\n  date?: string;\n  dateTime?: string;\n  timeZone?: string;\n}\n\ninterface AcademicCalEventsResponseProperties {\n  last_fetched: string;\n  events: AcademicCalEventProperties[];\n  error: boolean;\n  message?: string;\n}\n\nexport interface SessionUserData {\n  email: string;\n  email_verified: boolean;\n  family_name: string;\n  given_name: string;\n  locale: string;\n  name: string;\n  nickname: string;\n  picture: string;\n  sub: string;\n  updated_at: string;\n  calendar_book?: UserCalendarBookItem[]\n}\n\nexport interface UserCalendarBookItem {\n  id: string\n  title: string\n  color: string\n  primary: boolean\n  selected: boolean\n}\n\nconst defaultUserCalendarBookItem = {\n  id: \"\",\n  title: \"Select a calendar\",\n  color: \"#f0f0f0\",\n  primary: false,\n  selected: false\n}\n\nfunction App() {\n  const [inputCRN, setInputCRN] = useState(\"\");\n  const [basket, setBasket] = useState([] as CourseCardProps[]);\n  const [search, setSearch] = useState([] as CourseCardProps[])\n  const [requestError, setRequestError] = useState(false);\n  const [academicCalEvents, setAcademicCalEvents] = useState(\n    [] as EventProperties[]\n  );\n  const [userData, setUserData] = useState({} as SessionUserData);\n  const [selectedCalendar, setSelectedCalendar] = useState(defaultUserCalendarBookItem as UserCalendarBookItem)\n\n  const valuesDefault = {\n    dep_name: \"\",\n    crn: \"\",\n    prof_name: \"\",\n    class_name:\"\"\n  } as FormValues\n\n  const [values, setValues] = useState(valuesDefault)\n\n  //Just like component did mount <3\n  useEffect(() => {\n    fetch(\"/api/getacademiccalinfo\")\n      .then((res) => res.json())\n      .then((response: AcademicCalEventsResponseProperties) => {\n        let AcademicCalEventsProcessed = [] as EventProperties[];\n        if (response.error) {\n          console.log(\"Error when fetching response: \" + response.message);\n          return;\n        }\n\n        AcademicCalEventsProcessed = response.events.map((event) => {\n          let startTime = new Date();\n          let endTime = new Date();\n\n          if (event.start.date && event.end.date) {\n            startTime = new Date(Date.parse(event.start.date));\n            startTime = new Date(Date.parse(event.end.date));\n          } else if (event.start.dateTime && event.end.dateTime) {\n            startTime = new Date(Date.parse(event.start.dateTime));\n            endTime = new Date(Date.parse(event.end.dateTime));\n          }\n\n          const allDayBool =\n            startTime.getTime() - endTime.getTime() > 1000 * 60 * 60 * 23;\n          return {\n            start: startTime,\n            end: endTime,\n            title: event.summary,\n            allDay: allDayBool,\n          } as EventProperties;\n        });\n        setAcademicCalEvents(AcademicCalEventsProcessed);\n\n        fetch(\"/api/user_data\")\n          .then((res) => res.json())\n          .then((data) => {\n            let userCalBook = data.user_calendar_book\n            userCalBook.sort((cal_a: UserCalendarBookItem, cal_b: UserCalendarBookItem) => {\n              return (cal_a.selected === cal_b.selected) ? 0 : cal_a.selected ? -1 : 1; \n            })\n            const userData = {\n              ...data.session,\n              calendar_book: userCalBook\n            }\n            setUserData(userData as SessionUserData);\n          });\n      });\n  }, []);\n\n  useEffect(() => {\n    if(userData.calendar_book){\n      const primaryCal = userData.calendar_book.filter((cal) =>{\n        return cal.primary\n      })[0]\n      setSelectedCalendar(primaryCal)\n    }\n  }, [userData])\n\n  const handleSubmit = (e: React.FormEvent, values: FormValues) => {\n    e.preventDefault();\n    setRequestError(false);\n    if (\n      basket.filter((course) => {\n        return course.crn == inputCRN;\n      }).length < 1\n    ) {\n      fetch(\"/api/getinfo\", {\n        method: 'POST',\n        body: JSON.stringify(values),\n        headers: {\"Content-Type\": \"application/json\"}\n      })\n        .then((res: Response) => {\n          try {\n            let result: Promise<APIResponse> = res.json();\n            return result;\n          }\n          catch(err) {\n            console.log(err)\n            throw err\n          }\n        })\n        .then((result) => {\n          if (result.error) {\n            throw new Error(result.message);\n          }\n          console.log(result)\n          return result;\n        })\n        .then((response) => {\n          const courseCards = response.results.map((result: APIResponseCourse) => {\n            let processedResponse: CourseCardProps | null = null;\n          let processedResponseTimings: CourseTimings[] = result.timings.map(\n            (timing) => {\n              return {\n                weekday: new Date(timing.start).getDay(),\n                start: new Date(timing.start),\n                end: new Date(timing.end),\n              };\n            }\n          );\n\n          return {\n            courseName: result.name,\n            subjectName: result.sname,\n            section: result.section,\n            professorName: result.professor__name,\n            crn: result.crn.toString(),\n            timings: processedResponseTimings,\n          } as CourseCardProps;\n          }) \n          \n\n          console.log(JSON.stringify(courseCards));\n\n          setSearch(courseCards);\n        })\n        .catch((err: Error) => {\n          setRequestError(true);\n          console.log(\"OOOO\", err);\n        })\n        .finally(() => {\n\n        });\n    } else {\n      setRequestError(true);\n    }\n  };\n\n  const handleRemoveButtonClick = (crn: string) => {\n    let newState = basket;\n    newState = newState.filter((course) => {\n      if(course.crn === crn){\n        setSearch([...search, course])\n      }\n      return course.crn !== crn;\n    });\n    console.log(newState);\n    setBasket(newState);\n  };\n\n  const handleAddButtonClick = (crn: string) => {\n    //remove from search bar\n    setSearch(search.filter((course) => {\n      return course.crn !== crn;\n    }))\n\n    //add to basket\n    const newClass = search.filter((course) => {\n      return course.crn === crn;\n    });\n    setBasket([...basket, ...newClass]);\n  }\n\n  const sectionStyle: CSSProperties = {\n    borderColor: \"grey\",\n    borderWidth: \"2px\",\n    borderStyle: \"solid\",\n  };\n\n  const getCalSelectStyle = (cal: UserCalendarBookItem) => {\n    return {\n      backgroundColor: cal.color\n    } as CSSProperties\n  }\n\n  return (\n    <div className=\"App\">\n      <Navigation userData={userData} />\n      <Container fluid>\n        <Row>\n          <Col xl={12}>\n            <CourseSearch\n              handleSubmit={handleSubmit}\n              setValues={setValues}\n              values={values}\n              requestError={requestError}\n            />\n            {requestError ? (\n              <UncontrolledAlert label={\"errmsg\"} color={\"danger\"}>\n                There was an error. Please try again.\n              </UncontrolledAlert>\n            ) : (\n              \"\"\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col xl={2} style={sectionStyle}>\n            {search.map((course, index) => {\n              let basketCRNs = basket.map(course => course.crn)\n              if(basketCRNs.includes(course.crn)){\n                return;\n              }\n              return (\n                <CourseCard\n                  key={index}\n                  handleAddButtonClick={handleAddButtonClick}\n                  {...course}\n                />\n              );\n            })}\n          </Col>\n          <Col xl={2} style={sectionStyle}>\n            {basket.map((course, index) => {\n              return (\n                <CourseCard\n                  key={index}\n                  handleRemoveButtonClick={handleRemoveButtonClick}\n                  basket={true}\n                  {...course}\n                />\n              );\n            })}\n          </Col>\n          <Col xl={6} style={sectionStyle}>\n            <CalendarSection\n              events={basket}\n              academicCalEvents={academicCalEvents}\n            />\n          </Col>\n          <Col xl={2} style={sectionStyle}>\n            <UncontrolledDropdown\n              group\n              size=\"md\"\n            >\n              <DropdownToggle style={getCalSelectStyle(selectedCalendar)} caret> {selectedCalendar.title}</DropdownToggle>\n              <DropdownMenu>\n                {userData.calendar_book?.map((cal, index) => {\n                  const selected = cal.id == selectedCalendar.id\n                  return <DropdownItem active={selected} key={index} onClick={() => setSelectedCalendar(cal)}>{cal.title}</DropdownItem>\n                })}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}