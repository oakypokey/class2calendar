{"version":3,"sources":["components/Navigation.tsx","components/CourseCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","useState","loggedin","setLoggedin","toggle","Navbar","color","light","expand","NavbarBrand","href","Nav","className","NavItem","NavLink","url","Button","onClick","userStyle","borderRadius","UserBadge","UncontrolledDropdown","inNavbar","DropdownToggle","Media","style","right","object","src","alt","DropdownMenu","DropdownItem","CourseCardStyle","padding","margin","textAlign","TimingStyle","fontSize","ConflictStyle","width","CourseCard","courseName","subjectName","section","professorName","timings","conflict","getTimeString","date","hours","getHours","minutes","getMinutes","ampm","Card","CardTitle","Badge","pill","CardSubtitle","map","time","index","key","weekday","start","end","App","inputCRN","setInputCRN","basket","setBasket","requestError","setRequestError","Container","Row","Col","lg","onSubmit","fetch","then","res","result","json","console","log","data","error","Error","results","crn","toString","payload","timing","Date","getDay","catch","e","response","processedResponse","name","sname","professor__name","JSON","stringify","err","finally","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","value","onChange","target","placeholder","invalid","course","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1d42fe4a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  Media,\n  NavbarText,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\n\nexport const Navigation: React.FC = () => {\n  const [loggedin, setLoggedin] = useState(false);\n  const toggle = () => setLoggedin(!loggedin);\n  return (\n    <>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Classic Course Manager</NavbarBrand>\n        <Nav className=\"mr-auto\">\n          <NavItem>\n            <NavLink> About</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> Help </NavLink>\n          </NavItem>\n        </Nav>\n        {loggedin ? (\n          <UserBadge\n            url=\"https://picsum.photos/35\"\n            toggle={toggle}\n          />\n        ) : (\n          <Button onClick={toggle} color=\"primary\">\n            {\" \"}\n            Login{\" \"}\n          </Button>\n        )}\n      </Navbar>\n    </>\n  );\n};\n\ninterface UserBadgeProps {\n  url: string;\n  toggle: any;\n}\n\nconst userStyle: React.CSSProperties = {\n  borderRadius: \"50%\"\n}\n\nconst UserBadge: React.FC<UserBadgeProps> = ({\n  url,\n  toggle,\n}: UserBadgeProps) => {\n  return (\n    <>\n      <UncontrolledDropdown inNavbar>\n        <DropdownToggle color=\"light\">\n          <Media  style={userStyle} right object src={url} alt=\"Generic placeholder image\" />\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem onClick={toggle}>Logout</DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Badge,\n} from \"reactstrap\";\n\nexport interface CourseTimings {\n  weekday: number\n  start: Date\n  end: Date\n}\n\nexport interface CourseCardProps {\n  courseName: string;\n  subjectName: string;\n  section: string;\n  professorName: string;\n  timings?: CourseTimings[];\n  conflict?: boolean;\n}\n\nconst CourseCardStyle: React.CSSProperties = {\n  padding: \"10px\",\n  margin: \"5px\",\n  textAlign: \"left\"\n};\n\nconst TimingStyle: React.CSSProperties = {\n  fontSize: \"0.85vw\"\n};\n\nconst ConflictStyle: React.CSSProperties = {\n  width: \"40%\"\n};\n\nexport const CourseCard: React.FC<CourseCardProps> = ({\n  courseName,\n  subjectName,\n  section,\n  professorName,\n  timings,\n  conflict,\n}: CourseCardProps) => {\n\n  const getTimeString = (date: Date) => {\n    let hours = date.getHours();\n    let minutes: string | number = date.getMinutes();\n    let ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  }\n\n  return (\n    <>\n      <Card style={CourseCardStyle}>\n        <CardTitle>\n          <h4>{courseName}</h4>\n          {conflict ? (\n            <Badge style={ConflictStyle} pill color=\"danger\">\n              CONFLICT\n            </Badge>\n          ) : (\n            \"\"\n          )}\n        </CardTitle>\n        <CardSubtitle>\n            {subjectName} - {section}\n          </CardSubtitle>\n          <CardSubtitle>Professor {professorName}</CardSubtitle>\n          <br/>\n          {timings?.map((time, index) => {\n            return (\n              <CardSubtitle key={index} style={TimingStyle}>\n                {time.weekday}: {getTimeString(time.start)} to {getTimeString(time.end)}\n              </CardSubtitle>\n            );\n          })}\n          \n        <Button color=\"danger\"> Remove </Button>\n      </Card>\n    </>\n  );\n};\n\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navigation } from \"./components/Navigation\";\nimport { CourseCard, CourseCardProps, CourseTimings } from \"./components/CourseCard\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Navbar,\n  NavbarBrand,\n  NavbarText,\n  NavbarToggler,\n  Nav,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from \"reactstrap\";\n\ninterface APIResponse{\n  error: boolean\n  results: APIResponseCourse[]\n}\n\ninterface APIResponseCourse{\n  crn: number\n  level: string\n  multiple_sections: boolean\n  name: string\n  professor__name: string\n  remaining: number\n  section: string\n  show_xlist: boolean\n  sname: string\n  waitlistact: number\n  timings?: CourseTimings[]\n}\n\ninterface APIResponseTimings{\n  error: boolean\n  data: APIResponseTimingsData[]\n}\n\ninterface APIResponseTimingsData{\n  allDay: boolean\n  end: string\n  start: string\n  title: string\n  crn: number\n  id: number\n}\n\nfunction App() {\n  const [inputCRN, setInputCRN] = useState(\"\");\n  const [basket, setBasket] = useState([] as CourseCardProps[]);\n  const [requestError, setRequestError] = useState(false)\n\n  const handleCRNSubmit = () => {\n    setRequestError(false)\n    fetch(\"/api/getinfo?crn=\" + inputCRN)\n      .then((res: Response) => {\n        let result: Promise<APIResponse> = res.json()\n        console.log(\"getInfo\", result)\n        return result\n      }).then((result) => {\n        let data = result\n        if(result.error){\n          throw new Error(\"Course does not exist.\")\n        }\n\n        fetch(\"/api/getcoursetimings?crn=\" + result.results[0].crn.toString()).then((res: Response) => {\n          let result: Promise<APIResponseTimings> = res.json()\n          console.log(\"getCourseTimings\", result)\n          return result\n        }).then((res) => {\n          let payload = res.data.map((timing: APIResponseTimingsData) => {\n            return {\n              weekday: new Date(timing.start).getDay(),\n              start: new Date(timing.start),\n              end: new Date(timing.end)\n            } as CourseTimings\n          })\n          data.results[0].timings = payload\n        }).catch(e => {\n          setRequestError(true)\n          throw new Error(\"getCourseTimings\")\n        })\n\n        return data\n      })\n      .then((response) => {\n        let processedResponse: CourseCardProps | null = null\n        \n        processedResponse = {\n          courseName: response.results[0].name,\n          subjectName: response.results[0].sname,\n          section: response.results[0].section,\n          professorName: response.results[0].professor__name,\n          timings: response.results[0].timings\n        } as CourseCardProps\n\n        console.log(JSON.stringify(processedResponse));\n        \n        setBasket([...basket, processedResponse])\n      })\n      .catch((err: Error) => {\n        console.log(\"OOOO\", err);\n        \n      })\n      .finally(() => {\n        setInputCRN(\"\");\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation />\n      {requestError ? \"true\" : \"false\"}\n      <Container>\n        <Row>\n          <Col lg={3}>\n            <form onSubmit={handleCRNSubmit}>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>CRN</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  name={\"crn\"}\n                  value={inputCRN}\n                  onChange={(e) => setInputCRN(e.target.value)}\n                  placeholder=\"12345\"\n                  invalid={requestError}\n                />\n              </InputGroup>\n            </form>\n            {basket.map((course, index) => {\n              return <CourseCard key={index} {...course} />;\n            })}\n          </Col>\n          <Col lg={9}></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\nconst DUMMYDATA: CourseCardProps[] = [\n  {\n    courseName: \"Digital Design I\",\n    subjectName: \"ARTS 100\",\n    section: \"02\",\n    professorName: \"Mike Wang\",\n    timings: [\n      {\n        weekday: 1,\n        start: new Date(),\n        end: new Date(),\n      },\n      {\n        weekday: 3,\n        start: new Date(),\n        end: new Date(),\n      },\n    ],\n    conflict: true,\n  },\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}