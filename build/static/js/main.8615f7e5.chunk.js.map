{"version":3,"sources":["components/Navigation.tsx","components/CourseCard.tsx","components/CourseSearch.tsx","components/CalendarSection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","userData","useState","Navbar","color","light","expand","NavbarBrand","href","Nav","className","NavItem","NavLink","userStyle","borderRadius","maxWidth","float","display","userBadgeStyle","marginTop","marginLeft","UserBadge","UncontrolledDropdown","inNavbar","DropdownToggle","Media","style","right","object","src","picture","alt","given_name","DropdownMenu","DropdownItem","CourseCardStyle","padding","margin","textAlign","TimingStyle","fontSize","ConflictStyle","width","CourseCard","courseName","subjectName","section","professorName","timings","conflict","handleRemoveButtonClick","crn","getTimeString","date","hours","getHours","minutes","getMinutes","ampm","Card","CardTitle","Badge","pill","CardSubtitle","map","time","index","key","weekday","start","end","Button","onClick","CourseSearch","requestError","handleCRNSubmit","setInputCRN","inputCRN","Container","onSubmit","e","data-testid","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","name","value","onChange","target","placeholder","borderColor","undefined","CalendarSection","events","academicCalEvents","Date","calendarRef","React","createRef","useEffect","allEvents","calendarObj","current","calendarAPI","getApi","sortedEvents","sort","a","b","length","gotoDate","getStartEndTime","result","startTime","endTime","defaultDate","console","log","startHour","toString","startMin","slice","endHour","endMin","lateHours","earlyHours","defaultView","plugins","timeGridPlugin","interactionPlugin","weekends","slotDuration","minTime","maxTime","slotEventOverlap","allDaySlot","slotLabelInterval","ref","App","basket","setBasket","setRequestError","setAcademicCalEvents","setUserData","fetch","then","res","json","response","AcademicCalEventsProcessed","error","message","event","parse","dateTime","allDayBool","getTime","title","summary","allDay","data","session","newState","filter","course","sectionStyle","borderWidth","borderStyle","fluid","Row","Col","xl","preventDefault","Error","processedResponse","processedResponseTimings","results","timing","getDay","sname","professor__name","JSON","stringify","catch","err","finally","UncontrolledAlert","label","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8615f7e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  Media,\n  NavbarText,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { SessionUserData }  from '../App'\n\ninterface NavigationProps {\n  userData: SessionUserData\n}\n\nexport const Navigation: React.FC<NavigationProps> = ({ userData }: NavigationProps) => {\n  const [loggedin, setLoggedin] = useState(false);\n  const toggle = () => setLoggedin(!loggedin);\n  return (\n    <>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Classic Course Manager</NavbarBrand>\n        <Nav className=\"mr-auto\">\n          <NavItem>\n            <NavLink> About</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink> Help </NavLink>\n          </NavItem>\n        </Nav>\n          <UserBadge\n            userData={userData}\n          />\n      </Navbar>\n    </>\n  );\n};\n\ninterface UserBadgeProps {\n  userData: SessionUserData\n}\n\nconst userStyle: React.CSSProperties = {\n  borderRadius: \"50%\",\n  maxWidth: \"45px\",\n  float: \"left\",\n  display: \"inline-box\"\n}\n\nconst userBadgeStyle: React.CSSProperties = {\n  float: \"right\",\n  marginTop: \"10px\",\n  marginLeft: \"5px\"\n}\n\nconst UserBadge: React.FC<UserBadgeProps> = ({\n  userData\n}: UserBadgeProps) => {\n  return (\n    <>\n      <UncontrolledDropdown inNavbar>\n        <DropdownToggle color=\"light\">\n          <Media style={userStyle} right object src={userData.picture} alt=\"User Image\" />\n          <p style={userBadgeStyle}><b>{userData.given_name}</b></p>\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem href=\"/logout\"> Logout </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Badge,\n} from \"reactstrap\";\n\nexport interface CourseTimings {\n  weekday: number\n  start: Date\n  end: Date\n}\n\nexport interface CourseCardProps {\n  courseName: string;\n  subjectName: string;\n  section: string;\n  professorName: string;\n  timings?: CourseTimings[];\n  conflict?: boolean;\n  crn: string;\n  handleRemoveButtonClick?: any\n}\n\nconst CourseCardStyle: React.CSSProperties = {\n  padding: \"10px\",\n  margin: \"5px\",\n  textAlign: \"left\"\n};\n\nconst TimingStyle: React.CSSProperties = {\n  fontSize: \"0.85vw\"\n};\n\nconst ConflictStyle: React.CSSProperties = {\n  width: \"40%\"\n};\n\nexport const CourseCard: React.FC<CourseCardProps> = ({\n  courseName,\n  subjectName,\n  section,\n  professorName,\n  timings,\n  conflict,\n  handleRemoveButtonClick,\n  crn\n}: CourseCardProps) => {\n\n  const getTimeString = (date: Date) => {\n    let hours = date.getHours();\n    let minutes: string | number = date.getMinutes();\n    let ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  }\n\n  return (\n    <>\n      <Card style={CourseCardStyle}>\n        <CardTitle>\n          <h4>{courseName}</h4>\n          {conflict ? (\n            <Badge style={ConflictStyle} pill color=\"danger\">\n              CONFLICT\n            </Badge>\n          ) : (\n            \"\"\n          )}\n        </CardTitle>\n        <CardSubtitle>\n            {subjectName} - {section}\n          </CardSubtitle>\n          <CardSubtitle>Professor {professorName}</CardSubtitle>\n          <br/>\n          {timings?.map((time, index) => {\n            return (\n              <CardSubtitle key={index} style={TimingStyle}>\n                {time.weekday}: {getTimeString(time.start)} to {getTimeString(time.end)}\n              </CardSubtitle>\n            );\n          })}\n          \n        <Button color=\"danger\" onClick={() => {handleRemoveButtonClick(crn)}}> Remove </Button>\n      </Card>\n    </>\n  );\n};\n\n","import React, { CSSProperties } from \"react\";\nimport { InputGroup, InputGroupAddon, InputGroupText, Input, Container } from \"reactstrap\";\n\ninterface CourseSearchComponents {\n  requestError: boolean;\n  handleCRNSubmit: (e: React.FormEvent<Element>) => void;\n  setInputCRN: React.Dispatch<React.SetStateAction<string>>;\n  inputCRN: string;\n}\n\nexport const CourseSearch: React.FC<CourseSearchComponents> = ({\n  requestError,\n  handleCRNSubmit,\n  setInputCRN,\n  inputCRN,\n}: CourseSearchComponents) => {\n\n  const errorStyle: CSSProperties = {\n    borderColor: \"red\",\n  };\n\n  return (\n    <>\n    <Container>\n      <form onSubmit={(e) => handleCRNSubmit(e)} data-testid={\"class-search-form\"}>\n        <InputGroup>\n          <InputGroupAddon addonType=\"prepend\">\n            <InputGroupText>CRN</InputGroupText>\n          </InputGroupAddon>\n          <Input\n            name={\"crn\"}\n            value={inputCRN}\n            onChange={(e) => setInputCRN(e.target.value)}\n            placeholder=\"12345\"\n            style={requestError ? errorStyle : undefined}\n            data-testid={\"crn-input\"}\n          />\n        </InputGroup>\n      </form>\n      </Container>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nimport \"@fullcalendar/core/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport { CourseCardProps } from \"./CourseCard\";\nimport { ExtendedEventSourceInput } from \"@fullcalendar/core/structs/event-source\";\nimport { EventSourceFunc } from \"@fullcalendar/core/event-sources/func-event-source\";\nimport { EventInput, Calendar } from \"@fullcalendar/core\";\nimport { durationsEqual } from \"@fullcalendar/core/datelib/duration\";\n\ninterface CalendarSectionProps {\n  events: CourseCardProps[];\n  academicCalEvents: EventProperties[];\n}\n\nexport interface EventProperties {\n  start: Date;\n  end: Date;\n  title: string;\n  allDay: boolean;\n}\n\nexport const CalendarSection: React.FC<CalendarSectionProps> = ({\n  events,\n  academicCalEvents,\n}: CalendarSectionProps) => {\n    const [defaultDate, setDefaultDate] = useState(new Date())\n    const calendarRef: React.RefObject<FullCalendar> = React.createRef()\n\n  useEffect(() => {\n      //TODO: accomodate for course events as well\n      const allEvents = [...academicCalEvents]\n      const calendarObj = calendarRef.current\n      if(calendarObj){\n        const calendarAPI = calendarObj.getApi()\n\n        const sortedEvents = allEvents.sort((a, b) => {\n            return a.start > b.start ? 1 : -1;\n          });\n        \n        if(allEvents.length > 1){\n            calendarAPI.gotoDate(sortedEvents[0].start)\n        }\n        \n      }\n  }, [academicCalEvents])\n\n  const allEvents = academicCalEvents;\n\n  interface resultProperties {\n    startTime: string;\n    endTime: string;\n    defaultDate: Date;\n  }\n\n  const getStartEndTime = (events: EventProperties[]): resultProperties => {\n    let result = {\n      startTime: \"08:00\",\n      endTime: \"17:45\",\n      defaultDate: new Date(),\n    };\n\n    if(events.length < 1){\n        return result\n    }\n\n    events.sort((a, b) => {\n      return a.start > b.start ? 1 : -1;\n    });\n\n    result.defaultDate = events[0].start\n    console.log(result.defaultDate)\n\n    let startHour = (events[0].start.getHours() - 1).toString();\n    let startMin = events[0].start.getMinutes().toString();\n    startHour = (\"00000\" + startHour).slice(-2);\n    startMin = (\"00000\" + startMin).slice(-2);\n\n    let endHour = (events[events.length - 1].end.getHours() + 1).toString();\n    let endMin = events[events.length - 1].end.getMinutes().toString();\n    endHour = (\"00000\" + endHour).slice(-2);\n    endMin = (\"00000\" + endMin).slice(-2);\n\n    const lateHours = events[events.length - 1].end.getHours() > 17;\n    const earlyHours = events[0].start.getHours() < 8;\n\n    if (\n      !(\n        events[0].start.getHours() - events[events.length - 1].end.getHours() >=\n          4 ||\n        lateHours ||\n        earlyHours\n      )\n    ) {\n      result.startTime = `${startHour}:${startMin}`;\n      result.endTime = `${endHour}:${endMin}`;\n    }\n\n    return result;\n  };\n\n  return (\n    <>\n      <FullCalendar\n        events={allEvents}\n        defaultView=\"timeGridWeek\"\n        plugins={[timeGridPlugin, interactionPlugin]}\n        weekends={false}\n        slotDuration={{ minutes: 30 }}\n        minTime={getStartEndTime(allEvents).startTime}\n        maxTime={getStartEndTime(allEvents).endTime}\n        slotEventOverlap={true}\n        allDaySlot={true}\n        slotLabelInterval={{ minutes: 90 }}\n        ref={calendarRef}\n      ></FullCalendar>\n    </>\n  );\n};\n","import React, {\n  useState,\n  FormEventHandler,\n  CSSProperties,\n  useEffect,\n} from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navigation } from \"./components/Navigation\";\nimport {\n  CourseCard,\n  CourseCardProps,\n  CourseTimings,\n} from \"./components/CourseCard\";\n\nimport { CourseSearch } from \"./components/CourseSearch\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Navbar,\n  NavbarBrand,\n  NavbarText,\n  NavbarToggler,\n  Nav,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n  Carousel,\n  UncontrolledAlert,\n} from \"reactstrap\";\nimport { CalendarSection, EventProperties } from \"./components/CalendarSection\";\nimport { Session } from \"inspector\";\n\ninterface APIResponse {\n  error: boolean;\n  results: APIResponseCourse[];\n}\n\ninterface APIResponseCourse {\n  crn: number;\n  level: string;\n  multiple_sections: boolean;\n  name: string;\n  professor__name: string;\n  remaining: number;\n  section: string;\n  show_xlist: boolean;\n  sname: string;\n  waitlistact: number;\n  timings: APIResponseTimingsData[];\n}\n\ninterface APIResponseTimingsData {\n  allDay: boolean;\n  end: string;\n  start: string;\n  title: string;\n  crn: number;\n  id: number;\n}\n\ninterface AcademicCalEventProperties{\n  start: AcademicCalDateProperties\n  end: AcademicCalDateProperties\n  summary: string\n  description: string\n}\n\ninterface AcademicCalDateProperties{\n  date?: string\n  dateTime?: string\n  timeZone?: string\n}\n\ninterface AcademicCalEventsResponseProperties{\n  last_fetched: string\n  events: AcademicCalEventProperties[]\n  error: boolean\n  message?: string\n}\n\nexport interface SessionUserData {\n  email: string\n  email_verified: boolean\n  family_name: string\n  given_name: string\n  locale: string\n  name: string\n  nickname: string\n  picture: string\n  sub: string\n  updated_at: string\n}\n\nfunction App() {\n  const [inputCRN, setInputCRN] = useState(\"\");\n  const [basket, setBasket] = useState([] as CourseCardProps[]);\n  const [requestError, setRequestError] = useState(false);\n  const [academicCalEvents, setAcademicCalEvents] = useState([] as EventProperties[])\n  const [userData, setUserData] = useState({} as SessionUserData)\n\n  //Just like component did mount <3\n  useEffect(() => {\n    fetch('/api/getacademiccalinfo').then(res => res.json()).then((response: AcademicCalEventsResponseProperties) => {\n      let AcademicCalEventsProcessed = [] as EventProperties[]\n      if(response.error){\n        console.log(\"Error when fetching response: \" + response.message)\n        return\n      }\n\n      AcademicCalEventsProcessed = response.events.map((event) => {\n        let startTime = new Date()\n        let endTime = new Date()\n\n        if(event.start.date && event.end.date){\n          startTime = new Date(Date.parse(event.start.date))\n          startTime = new Date(Date.parse(event.end.date))\n        } else if(event.start.dateTime && event.end.dateTime) {\n          startTime = new Date(Date.parse(event.start.dateTime))\n          endTime = new Date(Date.parse(event.end.dateTime))\n        }\n      \n        const allDayBool = (startTime.getTime() - endTime.getTime()) > (1000 * 60 * 60 * 23)\n        console.log((startTime.getTime() - endTime.getTime()) > (1000 * 60 * 60 * 23))\n        return {\n          start: startTime,\n          end: endTime,\n          title: event.summary,\n          allDay: allDayBool\n        } as EventProperties\n      })\n      console.log(AcademicCalEventsProcessed)\n      setAcademicCalEvents(AcademicCalEventsProcessed)\n\n      fetch('/api/user_data').then(res => res.json()).then(data => {setUserData(data.session as SessionUserData)})\n    })\n  }, [])\n\n  const handleCRNSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setRequestError(false);\n    if (\n      basket.filter((course) => {\n        return course.crn == inputCRN;\n      }).length < 1\n    ) {\n      fetch(\"/api/getinfo?crn=\" + inputCRN)\n        .then((res: Response) => {\n          let result: Promise<APIResponse> = res.json();\n          return result;\n        })\n        .then((result) => {\n          if (result.error) {\n            throw new Error(\"Course does not exist.\");\n          }\n          return result;\n        })\n        .then((response) => {\n          let processedResponse: CourseCardProps | null = null;\n          let processedResponseTimings: CourseTimings[] = response.results[0].timings.map(\n            (timing) => {\n              return {\n                weekday: new Date(timing.start).getDay(),\n                start: new Date(timing.start),\n                end: new Date(timing.end),\n              };\n            }\n          );\n\n          processedResponse = {\n            courseName: response.results[0].name,\n            subjectName: response.results[0].sname,\n            section: response.results[0].section,\n            professorName: response.results[0].professor__name,\n            crn: response.results[0].crn.toString(),\n            timings: processedResponseTimings,\n          } as CourseCardProps;\n\n          console.log(JSON.stringify(processedResponse));\n\n          setBasket([...basket, processedResponse]);\n        })\n        .catch((err: Error) => {\n          setRequestError(true);\n          console.log(\"OOOO\", err);\n        })\n        .finally(() => {\n          setInputCRN(\"\");\n        });\n    } else {\n      setInputCRN(\"\");\n      setRequestError(true);\n    }\n  };\n\n  const handleRemoveButtonClick = (crn: string) => {\n    let newState = basket;\n    newState = newState.filter((course) => {\n      return course.crn !== crn;\n    });\n    console.log(newState);\n    setBasket(newState);\n  };\n\n  const sectionStyle: CSSProperties = {\n    borderColor: \"grey\",\n    borderWidth: \"2px\",\n    borderStyle: \"solid\"\n  }\n\n  return (\n    <div className=\"App\">\n      <Navigation userData={userData}/>\n      <Container fluid>\n        <Row>\n          <Col xl={6}>\n          <CourseSearch\n              handleCRNSubmit={handleCRNSubmit}\n              setInputCRN={setInputCRN}\n              inputCRN={inputCRN}\n              requestError={requestError}\n            />\n            {requestError ? <UncontrolledAlert label={\"errmsg\"} color={\"danger\"}>\n              There was an error. Please try again.\n            </UncontrolledAlert> : ''}\n          </Col>\n          <Col xl={6}>\n            <Container>\n              <Row>\n              <Col xs={4}>Something</Col><Col xs={4}>Something</Col><Col xs={4}>Something</Col>\n              </Row>\n              <Row>\n              <Col xs={4}>Something</Col><Col xs={4}>Something</Col><Col xs={4}>Something</Col>\n              </Row>\n            </Container>\n          </Col>\n        </Row>\n        <Row>\n        <Col xl={3} style={sectionStyle}>\n            \n            {basket.map((course, index) => {\n              return (\n                <CourseCard\n                  key={index}\n                  handleRemoveButtonClick={handleRemoveButtonClick}\n                  {...course}\n                />\n              );\n            })}\n          </Col>\n          <Col xl={3} style={sectionStyle}>\n            {basket.map((course, index) => {\n              return (\n                <CourseCard\n                  key={index}\n                  handleRemoveButtonClick={handleRemoveButtonClick}\n                  {...course}\n                />\n              );\n            })}\n          </Col>\n          <Col xl={6} style={sectionStyle}>\n            <CalendarSection events={basket} academicCalEvents={academicCalEvents}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}